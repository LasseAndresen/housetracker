version: '3.8'

services:
  db:
    image: timescale/timescaledb:latest-pg15
    container_name: timescale-db
    ports:
      - '${DB_PORT:-5432}:5432'
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - timescale_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DB_USER}", "-d", "${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5

  migrate:
    image: flyway/flyway:10
    container_name: migrate-db
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT={DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
    volumes:
      - ./timescaledb/flyway/migrations:/flyway/sql
    command: >
      -url=jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}
      -user=${DB_USER}
      -password=${DB_PASSWORD}
      -locations=filesystem:/flyway/sql
      migrate
    restart: "no"

  backend:
    build: webService
    container_name: nestjs-backend
    ports:
      - '3000:3000'
    volumes:
      - /webService/app
      - /webService/app/node_modules
    depends_on:
      db:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
      scraper-api:
        condition: service_started
    environment:
      - NODE_ENV=development
      - DB_HOST=${DB_HOST}
      - DB_PORT=5432
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
    command: npm run start:dev
    develop:
      watch:
        - action: sync
          path: ./webService
          target: /app
          ignore:
            - node_modules/
            - dist/
            - .git/
        - action: rebuild
          path: ./webService

  scraper-api:
    build: scraperService
    container_name: scraperService-api
    ports:
      - '3002:3002'
    environment:
      - PORT=3002
    command: node server.js
    develop:
      watch:
        - action: sync
          path: ./scraperService
          target: /app
          ignore:
            - node_modules/
            - dist/
            - .git/
        - action: rebuild
          path: ./scraperService

  angular-ssr:
    build:
      context: /webFrontend
      dockerfile: dockerfile_dev
    container_name: angular-ssr
    ports:
      - "4200:4000"  # map container port 4000 to host port 4200
    environment:
      - NODE_ENV=development
    depends_on:
      - backend
    command: npm run build:shared-dtos && npm run watch:all
#    volumes:
#      - ./webFrontend:/app
#      - /app/node_modules/
    develop:
      watch:
        - action: sync
          path: ./webFrontend
          target: /app
          ignore:
            - node_modules/
            - .angular/
            - dist/
            - .git/
        - action: rebuild
          path: ./webFrontend
#  angular-ssr:
#    build: /webFrontend
#    container_name: angular-ssr
#    ports:
#      - "4200:4000"  # map container port 4000 to host port 4200
#    environment:
#      - NODE_ENV=development
#    depends_on:
#      - backend  # if it needs the backend
#    command: npm run watch:all
#    volumes:
#      - ./webFrontend:/app
#      - /app/node_modules/

volumes:
  timescale_data:
